{"ast":null,"code":"import Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport jwtDecode from 'jwt-decode';\nVue.use(VueRouter);\nconst routes = [{\n  path: '/login',\n  name: 'Login',\n  component: () => import('../views/Element/LoginView.vue')\n}, {\n  path: '/users',\n  name: 'Users',\n  component: () => import('../views/Element/ShowTaskView.vue'),\n  meta: {\n    requiresAuth: true\n  } // 需要身份验证的路由\n}];\nconst router = new VueRouter({\n  mode: 'history',\n  // 设置使用历史模式\n  routes\n});\n\n/*// 添加全局导航守卫\r\nrouter.beforeEach((to, from, next) => {\r\n  const loggedIn = !!localStorage.getItem('access_token'); // 确保返回布尔值并反转\r\n  console.log(`User logged in: ${loggedIn}`);\r\n  console.log(`Navigating from ${from.path} to ${to.path}`);\r\n  console.log(`Requires auth: ${to.matched.some(record => record.meta.requiresAuth)}`);\r\n\r\n  if (to.matched.some(record => record.meta.requiresAuth) && !loggedIn) {\r\n    next('/login'); // 如果未认证，重定向到登录页面\r\n  } else {\r\n    next(); // 否则，继续导航\r\n  }\r\n});*/\n\nconst isTokenValid = token => {\n  try {\n    const decoded = jwtDecode(token);\n    const currentTime = Date.now() / 1000;\n    return decoded.exp > currentTime;\n  } catch (error) {\n    return false;\n  }\n};\n// 添加全局导航守卫\n// 添加全局导航守卫\n// 添加全局导航守卫\nrouter.beforeEach((to, from, next) => {\n  const token = !localStorage.getItem('access_token'); // 确保返回布尔值并反转\n  console.log(`User logged in: ${token}`);\n  console.log(`Navigating from ${from.path} to ${to.path}`);\n  console.log(`Requires auth: ${to.matched.some(record => record.meta.requiresAuth)}`);\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    if (!token && to.path !== '/login') {\n      next('users'); // 如果未认证，并且不是在登录页面，则重定向到登录页面\n    } else {\n      next('login'); // 否则，继续导航\n    }\n  } else {\n    next(); // 对于不需要身份验证的路由，允许访问\n  }\n});\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","jwtDecode","use","routes","path","name","component","meta","requiresAuth","router","mode","isTokenValid","token","decoded","currentTime","Date","now","exp","error","beforeEach","to","from","next","localStorage","getItem","console","log","matched","some","record"],"sources":["H:/projects/task-manage-system/codes/front-end/src/router/index.js"],"sourcesContent":["import Vue from 'vue';\r\nimport VueRouter from 'vue-router';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nVue.use(VueRouter);\r\n\r\nconst routes = [\r\n  {\r\n    path: '/login',\r\n    name: 'Login',\r\n    component: () => import('../views/Element/LoginView.vue')\r\n  },\r\n  {\r\n    path: '/users',\r\n    name: 'Users',\r\n    component: () => import('../views/Element/ShowTaskView.vue'),\r\n    meta: { requiresAuth: true } // 需要身份验证的路由\r\n  }\r\n];\r\n\r\nconst router = new VueRouter({\r\n  mode: 'history', // 设置使用历史模式\r\n  routes\r\n});\r\n\r\n/*// 添加全局导航守卫\r\nrouter.beforeEach((to, from, next) => {\r\n  const loggedIn = !!localStorage.getItem('access_token'); // 确保返回布尔值并反转\r\n  console.log(`User logged in: ${loggedIn}`);\r\n  console.log(`Navigating from ${from.path} to ${to.path}`);\r\n  console.log(`Requires auth: ${to.matched.some(record => record.meta.requiresAuth)}`);\r\n\r\n  if (to.matched.some(record => record.meta.requiresAuth) && !loggedIn) {\r\n    next('/login'); // 如果未认证，重定向到登录页面\r\n  } else {\r\n    next(); // 否则，继续导航\r\n  }\r\n});*/\r\n\r\nconst isTokenValid = (token) => {\r\n  try {\r\n    const decoded = jwtDecode(token);\r\n    const currentTime = Date.now() / 1000;\r\n    return decoded.exp > currentTime;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n};\r\n// 添加全局导航守卫\r\n// 添加全局导航守卫\r\n// 添加全局导航守卫\r\nrouter.beforeEach((to, from, next) => {\r\n  const token = !localStorage.getItem('access_token'); // 确保返回布尔值并反转\r\n  console.log(`User logged in: ${token}`);\r\n  console.log(`Navigating from ${from.path} to ${to.path}`);\r\n  console.log(`Requires auth: ${to.matched.some(record => record.meta.requiresAuth)}`);\r\n\r\n  if (to.matched.some(record => record.meta.requiresAuth)) {\r\n    if (!token && to.path !== '/login') {\r\n      next('users'); // 如果未认证，并且不是在登录页面，则重定向到登录页面\r\n    } else {\r\n      next('login'); // 否则，继续导航\r\n    }\r\n  } else {\r\n    next(); // 对于不需要身份验证的路由，允许访问\r\n  }\r\n});\r\n\r\n\r\nexport default router;\r\n\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,SAAS,MAAM,YAAY;AAElCF,GAAG,CAACG,GAAG,CAACF,SAAS,CAAC;AAElB,MAAMG,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,gCAAgC;AAC1D,CAAC,EACD;EACEF,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,mCAAmC,CAAC;EAC5DC,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAC;AAC/B,CAAC,CACF;AAED,MAAMC,MAAM,GAAG,IAAIT,SAAS,CAAC;EAC3BU,IAAI,EAAE,SAAS;EAAE;EACjBP;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMQ,YAAY,GAAIC,KAAK,IAAK;EAC9B,IAAI;IACF,MAAMC,OAAO,GAAGZ,SAAS,CAACW,KAAK,CAAC;IAChC,MAAME,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;IACrC,OAAOH,OAAO,CAACI,GAAG,GAAGH,WAAW;EAClC,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,OAAO,KAAK;EACd;AACF,CAAC;AACD;AACA;AACA;AACAT,MAAM,CAACU,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC,MAAMV,KAAK,GAAG,CAACW,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;EACrDC,OAAO,CAACC,GAAG,CAAC,mBAAmBd,KAAK,EAAE,CAAC;EACvCa,OAAO,CAACC,GAAG,CAAC,mBAAmBL,IAAI,CAACjB,IAAI,OAAOgB,EAAE,CAAChB,IAAI,EAAE,CAAC;EACzDqB,OAAO,CAACC,GAAG,CAAC,kBAAkBN,EAAE,CAACO,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACtB,IAAI,CAACC,YAAY,CAAC,EAAE,CAAC;EAEpF,IAAIY,EAAE,CAACO,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACtB,IAAI,CAACC,YAAY,CAAC,EAAE;IACvD,IAAI,CAACI,KAAK,IAAIQ,EAAE,CAAChB,IAAI,KAAK,QAAQ,EAAE;MAClCkB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IACjB,CAAC,MAAM;MACLA,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IACjB;EACF,CAAC,MAAM;IACLA,IAAI,CAAC,CAAC,CAAC,CAAC;EACV;AACF,CAAC,CAAC;AAGF,eAAeb,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
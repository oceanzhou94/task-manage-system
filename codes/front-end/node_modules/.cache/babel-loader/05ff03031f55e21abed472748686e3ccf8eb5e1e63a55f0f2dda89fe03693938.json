{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      isVisible: false,\n      isVisible1: true,\n      isVisible2: false,\n      dialogAddUserVisible: false,\n      dialogAddTaskVisible: false,\n      dialogEditUserVisible: false,\n      dialogEditTaskVisible: false,\n      // isCollapse: true,\n      formInline: {\n        id: '',\n        username: '',\n        gender: ''\n      },\n      newUser: {\n        id: '',\n        username: '',\n        gender: '',\n        phone: ''\n      },\n      newTask: {\n        id: '',\n        description: '',\n        detail: '',\n        type: '',\n        price: '',\n        publisher_id: '',\n        created_time: '',\n        updated_time: ''\n      },\n      tableUserData: [],\n      tableTaskData: [],\n      editedData: {},\n      //编辑后的用户data\n      editedTask: {} //编辑后的任务data\n    };\n  },\n  methods: {\n    handleOpen(key, keyPath) {\n      console.log(key, keyPath);\n    },\n    handleClose(key, keyPath) {\n      console.log(key, keyPath);\n    },\n    onClickUsers() {\n      this.isVisible = true;\n      this.isVisible1 = false;\n      this.isVisible2 = false;\n      this.fetchUserData();\n    },\n    onClickTasks() {\n      this.isVisible2 = true;\n      this.isVisible = false;\n      this.isVisible1 = false;\n      this.fetchTaskData();\n    },\n    handleEdit(index, row) {\n      this.editedData = {\n        ...row\n      };\n      this.dialogEditUserVisible = true;\n    },\n    handleEdit1(index, row) {\n      this.editedTask = {\n        ...row\n      };\n      this.dialogEditTaskVisible = true;\n    },\n    handleDelete(index) {\n      this.tableUserData.splice(index, 1);\n    },\n    handleDelete1(index) {\n      this.tableTaskData.splice(index, 1);\n    },\n    updateUser() {\n      const index = this.tableUserData.findIndex(user => user.id === this.editedData.id);\n      if (index !== -1) {\n        this.tableUserData.splice(index, 1, this.editedData);\n      }\n      this.dialogEditUserVisible = false;\n    },\n    updateTask() {\n      const index = this.tableTaskData.findIndex(task => task.id === this.editedTask.id);\n      if (index !== -1) {\n        this.tableTaskData.splice(index, 1, this.editedTask);\n      }\n      this.dialogEditTaskVisible = false;\n    },\n    // addUser() {\n    //   this.tableUserData.push({...this.newUser});\n    //   this.dialogAddUserVisible = false;\n    // },\n    //添加用户\n    addUser() {\n      // 构建要发送到服务器端的用户数据\n      const userData = {\n        id: this.newUser.id,\n        username: this.newUser.username,\n        gender: this.newUser.gender,\n        phone: this.newUser.phone\n      };\n\n      // 发送HTTP POST请求到服务器端保存用户数据\n      axios.post('http://服务器地址/保存用户数据的接口路径', userData).then(response => {\n        // 如果保存成功，将新用户数据添加到前端的数据列表中\n        this.tableUserData.push(response.data); // 假设服务器返回了保存成功的用户数据\n        this.dialogAddUserVisible = false; // 关闭添加用户对话框\n      }).catch(error => {\n        console.error('Error adding user:', error);\n        // 处理保存失败的情况，例如显示错误信息给用户\n      });\n    },\n    //添加任务\n    addTask() {\n      // 构建要发送到服务器端的用户数据\n      const taskData = {\n        id: this.newTask.id,\n        description: this.newTask.description,\n        detail: this.newTask.detail,\n        type: this.newTask.type,\n        price: this.newTask.price,\n        publisher_id: this.newTask.publisher_id,\n        created_time: this.newTask.created_time,\n        updated_time: this.newTask.pupdated_time\n      };\n\n      // 发送HTTP POST请求到服务器端保存用户数据\n      axios.post('http://服务器地址/保存用户数据的接口路径', taskData).then(response => {\n        // 如果保存成功，将新用户数据添加到前端的数据列表中\n        this.tableTaskData.push(response.data); // 假设服务器返回了保存成功的用户数据\n        this.dialogAddTaskVisible = false; // 关闭添加用户对话框\n      }).catch(error => {\n        console.error('Error adding user:', error);\n        // 处理保存失败的情况，例如显示错误信息给用户\n      });\n    },\n    onSubmit() {\n      const requestData = {\n        id: this.formInline.id,\n        username: this.formInline.username,\n        gender: this.formInline.gender\n      };\n\n      //根据用户的id进行查询\n      axios.post(`/users?id=${this.formInline.id}`, requestData).then(response => {\n        console.log('Response from server:', response.data);\n      }).catch(error => {\n        console.error('Error:', error);\n      });\n    },\n    //根据\n    //获取任务的全部数据\n    fetchTaskData() {\n      console.log('Fetching task data...'); // 增加日志\n      axios.get('http://192.168.184.1:8000/tms/task/list').then(response => {\n        console.log('Task data fetched:', response.data.data.tasks); // Log the response data\n        this.tableTaskData = response.data.data.tasks; // 确保数据路径正确\n      }).catch(error => {\n        console.error('Error fetching task data:', error);\n        if (error.response) {\n          console.error('Error response data:', error.response.data);\n        }\n      });\n    },\n    //获取用户的全部数据\n    fetchUserData() {\n      axios.get('http://localhost:8000/tms/user/list').then(response => {\n        console.log('User data fetched:', response.data); // Log the response data\n        this.tableUserData = response.data.data.users; // Ensure data path is correct\n      }).catch(error => {\n        console.error('Error fetching user data:', error);\n      });\n    },\n    // 删除用户\n    deleteUser(id) {\n      // 发送 HTTP DELETE 请求到服务器端删除用户\n      axios.delete(`http://服务器地址/删除用户的接口路径/${id}`).then(response => {\n        console.log('User deleted successfully:', response.data);\n        // 在前端删除相应的用户数据\n        const index = this.tableUserData.findIndex(user => user.id === id);\n        if (index !== -1) {\n          this.tableUserData.splice(index, 1);\n        }\n      }).catch(error => {\n        console.error('Error deleting user:', error);\n        // 处理删除失败的情况，例如显示错误信息给用户\n      });\n    },\n    // 删除任务\n    deleteTask(id) {\n      // 发送 HTTP DELETE 请求到服务器端删除任务\n      axios.delete(`http://服务器地址/删除任务的接口路径/${id}`).then(response => {\n        console.log('Task deleted successfully:', response.data);\n        // 在前端删除相应的任务数据\n        const index = this.tableTaskData.findIndex(task => task.id === id);\n        if (index !== -1) {\n          this.tableTaskData.splice(index, 1);\n        }\n      }).catch(error => {\n        console.error('Error deleting task:', error);\n        // 处理删除失败的情况，例如显示错误信息给用户\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","isVisible","isVisible1","isVisible2","dialogAddUserVisible","dialogAddTaskVisible","dialogEditUserVisible","dialogEditTaskVisible","formInline","id","username","gender","newUser","phone","newTask","description","detail","type","price","publisher_id","created_time","updated_time","tableUserData","tableTaskData","editedData","editedTask","methods","handleOpen","key","keyPath","console","log","handleClose","onClickUsers","fetchUserData","onClickTasks","fetchTaskData","handleEdit","index","row","handleEdit1","handleDelete","splice","handleDelete1","updateUser","findIndex","user","updateTask","task","addUser","userData","post","then","response","push","catch","error","addTask","taskData","pupdated_time","onSubmit","requestData","get","tasks","users","deleteUser","delete","deleteTask"],"sources":["src/views/Element/ShowTaskView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-form :inline=\"true\" :model=\"formInline\" class=\"demo-form-inline\">\r\n      <el-form-item label=\"用户id\">\r\n        <el-input v-model=\"formInline.id\" placeholder=\"id\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"用户名\">\r\n        <el-input v-model=\"formInline.username\" placeholder=\"用户名\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"性别\">\r\n        <el-select v-model=\"formInline.gender\" placeholder=\"性别\">\r\n          <el-option label=\"男\" value=\"male\"></el-option>\r\n          <el-option label=\"女\" value=\"female\"></el-option>\r\n          <el-option label=\"保密\" value=\"secret\"></el-option>\r\n        </el-select>\r\n      </el-form-item>\r\n      <el-form-item>\r\n        <el-button type=\"primary\" @click=\"onSubmit\">查询</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n\r\n    <!-- 导航菜单 -->\r\n    <el-row class=\"tac\">\r\n      <el-col :span=\"3\" style=\"margin-top: 5px;position: absolute\">\r\n        <el-menu default-active=\"2\" class=\"el-menu-vertical-demo\" @open=\"handleOpen\" @close=\"handleClose\">\r\n          <el-submenu index=\"1\">\r\n            <template slot=\"title\">\r\n              <i class=\"el-icon-location\"></i>\r\n              <span>任务管理系统</span>\r\n            </template>\r\n            <el-menu-item-group>\r\n              <el-menu-item index=\"1-1\" @click=\"onClickUsers\">用户管理</el-menu-item>\r\n              <el-menu-item index=\"1-2\" @click=\"onClickTasks\">任务管理</el-menu-item>\r\n            </el-menu-item-group>\r\n          </el-submenu>\r\n        </el-menu>\r\n      </el-col>\r\n    </el-row>\r\n\r\n<!--    个人信息-->\r\n    <!-- Table -->\r\n    <el-button type=\"text\" @click=\"dialogTableVisible = true\">个人信息</el-button>\r\n\r\n    <el-dialog title=\"收货地址\" :visible.sync=\"dialogTableVisible\">\r\n      <el-table :data=\"gridData\">\r\n        <el-table-column property=\"date\" label=\"日期\" width=\"150\"></el-table-column>\r\n        <el-table-column property=\"name\" label=\"姓名\" width=\"200\"></el-table-column>\r\n        <el-table-column property=\"address\" label=\"地址\"></el-table-column>\r\n      </el-table>\r\n    </el-dialog>\r\n\r\n    <!-- 用户管理表格 -->\r\n    <div v-if=\"isVisible\">\r\n      <el-button type=\"primary\" @click=\"dialogAddUserVisible = true;\">添加用户</el-button>\r\n    <el-table :data=\"tableUserData\" style=\"width: 80%;margin-left: 260px;margin-top: 5px;\">\r\n      <el-table-column label=\"id\" width=\"180\">\r\n        <template slot-scope=\"scope\">\r\n          <span style=\"margin-left: 10px\">{{ scope.row.id }}</span>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"昵称\" width=\"180\">\r\n        <template slot-scope=\"scope\">\r\n          <el-popover trigger=\"hover\" placement=\"top\">\r\n            <div slot=\"reference\" class=\"name-wrapper\">\r\n              <el-tag size=\"medium\">{{ scope.row.username }}</el-tag>\r\n            </div>\r\n          </el-popover>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"密码\" width=\"180\">\r\n        <template v-slot=\"scope\">\r\n          <span style=\"margin-left: 10px\">{{ scope.row.password }}</span>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"性别\" width=\"180\">\r\n        <template v-slot=\"scope\">\r\n          <span style=\"margin-left: 10px\">{{ scope.row.gender }}</span>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"电话\" width=\"180\">\r\n        <template slot-scope=\"scope\">\r\n          <span style=\"margin-left: 10px\">{{ scope.row.phone }}</span>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"操作\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button type=\"text\" size=\"mini\" @click=\"handleEdit(scope.$index, scope.row)\">编辑</el-button>\r\n          <el-button type=\"text\" size=\"mini\" @click=\"handleDelete(scope.$index, scope.row)\">删除</el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n    </div>\r\n\r\n    <!-- 标题 -->\r\n    <h1 v-if=\"isVisible1\">欢迎来到任务管理系统</h1>\r\n\r\n    <!-- 任务管理表格 -->\r\n    <div v-if=\"isVisible2\">\r\n      <el-button type=\"primary\" @click=\"dialogAddTaskVisible = true;\">添加任务</el-button>\r\n    <el-table  :data=\"tableTaskData\" style=\"width: 80%;margin-left: 260px;margin-top: 5px;\">\r\n      <el-table-column label=\"id\" width=\"180\">\r\n        <template slot-scope=\"scope\">\r\n          <span style=\"margin-left: 10px\">{{ scope.row.id }}</span>\r\n        </template>\r\n      </el-table-column>\r\n\r\n      <el-table-column label=\"简要描述\" width=\"200\">\r\n        <template slot-scope=\"scope\">\r\n          <el-popover trigger=\"hover\" placement=\"top\">\r\n            <p>描述: {{ scope.row.description }}</p>\r\n            <div slot=\"reference\" class=\"name-wrapper\">\r\n              <el-tag size=\"medium\">{{ scope.row.description }}</el-tag>\r\n            </div>\r\n          </el-popover>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"详细描述\" width=\"220\">\r\n        <template slot-scope=\"scope\">\r\n          <span style=\"margin-left: 10px\">{{ scope.row.detail }}</span>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"类型\" width=\"120\">\r\n        <template slot-scope=\"scope\">\r\n          <span style=\"margin-left: 10px\">{{ scope.row.type }}</span>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"任务酬劳\" width=\"120\">\r\n        <template slot-scope=\"scope\">\r\n          <span style=\"margin-left: 10px\">{{ scope.row.price }}</span>\r\n        </template>\r\n      </el-table-column>\r\n<!--      <el-table-column label=\"任务发布人\" width=\"120\">-->\r\n<!--        <template slot-scope=\"scope\">-->\r\n<!--          <span style=\"margin-left: 10px\">{{ scope.row.publisher_id }}</span>-->\r\n<!--        </template>-->\r\n<!--      </el-table-column>-->\r\n      <el-table-column label=\"创建时间\" width=\"200\">\r\n        <template slot-scope=\"scope\">\r\n          <el-popover trigger=\"hover\" placement=\"top\">\r\n            <p>描述: {{ scope.row.created_time }}</p>\r\n            <div slot=\"reference\" class=\"name-wrapper\">\r\n              <el-tag size=\"medium\">{{ scope.row.created_time }}</el-tag>\r\n            </div>\r\n          </el-popover>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"更新时间\" width=\"200\">\r\n        <template slot-scope=\"scope\">\r\n          <el-popover trigger=\"hover\" placement=\"top\">\r\n            <p>描述: {{ scope.row.updated_time }}</p>\r\n            <div slot=\"reference\" class=\"name-wrapper\">\r\n              <el-tag size=\"medium\">{{ scope.row.updated_time }}</el-tag>\r\n            </div>\r\n          </el-popover>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"操作\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button type=\"text\" size=\"mini\" @click=\"handleEdit1(scope.$index, scope.row)\">编辑</el-button>\r\n<!--          <el-button type=\"text\" size=\"mini\" @click=\"handleDelete1(scope.$index, scope.row)\">删除</el-button>-->\r\n          <el-button type=\"text\" size=\"mini\" @click=\"deleteUser(scope.$index, scope.row)\">删除</el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n    </div>\r\n\r\n    <!-- 编辑用户对话框 -->\r\n    <el-dialog title=\"修改信息\" :visible.sync=\"dialogEditUserVisible\">\r\n      <el-form :model=\"editedData\">\r\n        <el-form-item label=\"用户名\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"editedData.name\" autocomplete=\"off\" placeholder=\"请输入要修改的用户名\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"性别\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"editedData.gender\" autocomplete=\"off\" placeholder=\"请输入性别\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"电话\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"editedData.telephone\" autocomplete=\"off\" placeholder=\"请输入电话号码\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogEditUserVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"updateUser\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <!-- 编辑任务对话框 -->\r\n    <el-dialog title=\"修改任务\" :visible.sync=\"dialogEditTaskVisible\">\r\n      <el-form :model=\"editedTask\">\r\n        <el-form-item label=\"简要描述\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"editedTask.description\" autocomplete=\"off\" placeholder=\"请输入要修改的简要描述\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"详细描述\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"editedTask.detail\" autocomplete=\"off\" placeholder=\"请输入详细描述\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"类型\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"editedTask.type\" autocomplete=\"off\" placeholder=\"请输入任务类型\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"任务酬劳\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"editedTask.price\" autocomplete=\"off\" placeholder=\"请输入任务酬劳\"></el-input>\r\n        </el-form-item>\r\n<!--        <el-form-item label=\"任务发布人\" :label-width=\"formLabelWidth\">-->\r\n<!--          <el-input v-model=\"editedTask.publisher_id\" autocomplete=\"off\" placeholder=\"请输入任务发布人\"></el-input>-->\r\n<!--        </el-form-item>-->\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogEditTaskVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"updateTask\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <!-- 添加用户对话框 -->\r\n    <el-dialog title=\"添加用户\" :visible.sync=\"dialogAddUserVisible\">\r\n      <el-form :model=\"newUser\">\r\n        <el-form-item label=\"id\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"newUser.id\" autocomplete=\"off\" placeholder=\"请输入id\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"用户名\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"newUser.username\" autocomplete=\"off\" placeholder=\"请输入用户名\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"密码\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"newUser.password\" autocomplete=\"off\" placeholder=\"请输入密码\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"性别\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"newUser.gender\" autocomplete=\"off\" placeholder=\"请输入性别\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"电话\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"newUser.phone\" autocomplete=\"off\" placeholder=\"请输入电话号码\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogAddUserVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"addUser\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <!-- 添加任务对话框 -->\r\n    <el-dialog title=\"添加任务\" :visible.sync=\"dialogAddTaskVisible\">\r\n      <el-form :model=\"newTask\">、\r\n        <el-form-item label=\"id\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"newTask.id\" autocomplete=\"off\" placeholder=\"请输入id\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"简要描述\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"newTask.description\" autocomplete=\"off\" placeholder=\"请输入简要描述\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"详细描述\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"newTask.detail\" autocomplete=\"off\" placeholder=\"请输入详细描述\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"类型\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"newTask.type\" autocomplete=\"off\" placeholder=\"请输入任务类型\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"任务酬劳\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"newTask.price\" autocomplete=\"off\" placeholder=\"请输入任务酬劳\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"任务发布人\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"newTask.publisher_id\" autocomplete=\"off\" placeholder=\"请输入任务发布人\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"创建时间\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"newTask.created_time\" autocomplete=\"off\" placeholder=\"请输入创建时间\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"更新时间\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"newTask.updated_time\" autocomplete=\"off\" placeholder=\"请输入更新时间\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogAddTaskVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"addTask\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      isVisible: false,\r\n      isVisible1: true,\r\n      isVisible2: false,\r\n      dialogAddUserVisible: false,\r\n      dialogAddTaskVisible: false,\r\n      dialogEditUserVisible: false,\r\n      dialogEditTaskVisible: false,\r\n      // isCollapse: true,\r\n      formInline: {\r\n        id: '',\r\n        username: '',\r\n        gender: ''\r\n      },\r\n      newUser: {\r\n        id:'',\r\n        username: '',\r\n        gender: '',\r\n        phone: '',\r\n      },\r\n      newTask: {\r\n        id:'',\r\n        description: '',\r\n        detail: '',\r\n        type: '',\r\n        price: '',\r\n        publisher_id: '',\r\n        created_time:'',\r\n        updated_time:'',\r\n      },\r\n      tableUserData: [],\r\n      tableTaskData: [],\r\n      editedData: {},//编辑后的用户data\r\n      editedTask: {}//编辑后的任务data\r\n    };\r\n  },\r\n  methods: {\r\n    handleOpen(key, keyPath) {\r\n      console.log(key, keyPath);\r\n    },\r\n    handleClose(key, keyPath) {\r\n      console.log(key, keyPath);\r\n    },\r\n    onClickUsers() {\r\n      this.isVisible = true;\r\n      this.isVisible1 = false;\r\n      this.isVisible2 = false;\r\n      this.fetchUserData();\r\n    },\r\n    onClickTasks() {\r\n      this.isVisible2 = true;\r\n      this.isVisible = false;\r\n      this.isVisible1 = false;\r\n      this.fetchTaskData();\r\n    },\r\n    handleEdit(index, row) {\r\n      this.editedData = {...row};\r\n      this.dialogEditUserVisible = true;\r\n    },\r\n    handleEdit1(index, row) {\r\n      this.editedTask = {...row};\r\n      this.dialogEditTaskVisible = true;\r\n    },\r\n    handleDelete(index) {\r\n      this.tableUserData.splice(index, 1);\r\n    },\r\n    handleDelete1(index) {\r\n      this.tableTaskData.splice(index, 1);\r\n    },\r\n    updateUser() {\r\n      const index = this.tableUserData.findIndex(user => user.id === this.editedData.id);\r\n      if (index !== -1) {\r\n        this.tableUserData.splice(index, 1, this.editedData);\r\n      }\r\n      this.dialogEditUserVisible = false;\r\n    },\r\n    updateTask() {\r\n      const index = this.tableTaskData.findIndex(task => task.id === this.editedTask.id);\r\n      if (index !== -1) {\r\n        this.tableTaskData.splice(index, 1, this.editedTask);\r\n      }\r\n      this.dialogEditTaskVisible = false;\r\n    },\r\n    // addUser() {\r\n    //   this.tableUserData.push({...this.newUser});\r\n    //   this.dialogAddUserVisible = false;\r\n    // },\r\n    //添加用户\r\n    addUser() {\r\n      // 构建要发送到服务器端的用户数据\r\n      const userData = {\r\n        id: this.newUser.id,\r\n        username: this.newUser.username,\r\n        gender: this.newUser.gender,\r\n        phone: this.newUser.phone\r\n      };\r\n\r\n      // 发送HTTP POST请求到服务器端保存用户数据\r\n      axios.post('http://服务器地址/保存用户数据的接口路径', userData)\r\n          .then(response => {\r\n            // 如果保存成功，将新用户数据添加到前端的数据列表中\r\n            this.tableUserData.push(response.data); // 假设服务器返回了保存成功的用户数据\r\n            this.dialogAddUserVisible = false; // 关闭添加用户对话框\r\n          })\r\n          .catch(error => {\r\n            console.error('Error adding user:', error);\r\n            // 处理保存失败的情况，例如显示错误信息给用户\r\n          });\r\n    },\r\n    //添加任务\r\n    addTask() {\r\n      // 构建要发送到服务器端的用户数据\r\n      const taskData = {\r\n        id: this.newTask.id,\r\n        description: this.newTask.description,\r\n        detail: this.newTask.detail,\r\n        type: this.newTask.type,\r\n        price: this.newTask.price,\r\n        publisher_id: this.newTask.publisher_id,\r\n        created_time: this.newTask.created_time,\r\n        updated_time: this.newTask.pupdated_time\r\n      };\r\n\r\n      // 发送HTTP POST请求到服务器端保存用户数据\r\n      axios.post('http://服务器地址/保存用户数据的接口路径', taskData)\r\n          .then(response => {\r\n            // 如果保存成功，将新用户数据添加到前端的数据列表中\r\n            this.tableTaskData.push(response.data); // 假设服务器返回了保存成功的用户数据\r\n            this.dialogAddTaskVisible = false; // 关闭添加用户对话框\r\n          })\r\n          .catch(error => {\r\n            console.error('Error adding user:', error);\r\n            // 处理保存失败的情况，例如显示错误信息给用户\r\n          });\r\n    },\r\n    onSubmit() {\r\n      const requestData = {\r\n        id: this.formInline.id,\r\n        username: this.formInline.username,\r\n        gender: this.formInline.gender\r\n      };\r\n\r\n      //根据用户的id进行查询\r\n      axios.post(`/users?id=${this.formInline.id}`, requestData)\r\n          .then(response => {\r\n            console.log('Response from server:', response.data);\r\n          })\r\n          .catch(error => {\r\n            console.error('Error:', error);\r\n          });\r\n    },\r\n    //根据\r\n    //获取任务的全部数据\r\n    fetchTaskData() {\r\n      console.log('Fetching task data...'); // 增加日志\r\n      axios.get('http://192.168.184.1:8000/tms/task/list')\r\n          .then(response => {\r\n            console.log('Task data fetched:', response.data.data.tasks); // Log the response data\r\n            this.tableTaskData = response.data.data.tasks; // 确保数据路径正确\r\n          })\r\n          .catch(error => {\r\n            console.error('Error fetching task data:', error);\r\n            if (error.response) {\r\n              console.error('Error response data:', error.response.data);\r\n            }\r\n          });\r\n    },\r\n    //获取用户的全部数据\r\n    fetchUserData() {\r\n      axios.get('http://localhost:8000/tms/user/list')\r\n          .then(response => {\r\n            console.log('User data fetched:', response.data); // Log the response data\r\n            this.tableUserData = response.data.data.users; // Ensure data path is correct\r\n          })\r\n          .catch(error => {\r\n            console.error('Error fetching user data:', error);\r\n          });\r\n    },\r\n    // 删除用户\r\n    deleteUser(id) {\r\n      // 发送 HTTP DELETE 请求到服务器端删除用户\r\n      axios.delete(`http://服务器地址/删除用户的接口路径/${id}`)\r\n          .then(response => {\r\n            console.log('User deleted successfully:', response.data);\r\n            // 在前端删除相应的用户数据\r\n            const index = this.tableUserData.findIndex(user => user.id === id);\r\n            if (index !== -1) {\r\n              this.tableUserData.splice(index, 1);\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('Error deleting user:', error);\r\n            // 处理删除失败的情况，例如显示错误信息给用户\r\n          });\r\n    },\r\n    // 删除任务\r\n    deleteTask(id) {\r\n      // 发送 HTTP DELETE 请求到服务器端删除任务\r\n      axios.delete(`http://服务器地址/删除任务的接口路径/${id}`)\r\n          .then(response => {\r\n            console.log('Task deleted successfully:', response.data);\r\n            // 在前端删除相应的任务数据\r\n            const index = this.tableTaskData.findIndex(task => task.id === id);\r\n            if (index !== -1) {\r\n              this.tableTaskData.splice(index, 1);\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('Error deleting task:', error);\r\n            // 处理删除失败的情况，例如显示错误信息给用户\r\n          });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.el-button {\r\n  width: auto; /* 恢复按钮默认宽度 */\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
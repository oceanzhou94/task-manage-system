{"ast":null,"code":"// import Vue from 'vue'\n// import VueRouter from 'vue-router'\n//\n//\n// Vue.use(VueRouter)\n//\n// const routes = [\n//   {\n//     path: '/login',\n//     name: 'Login',\n//     component: () => import('../views/Element/LoginView.vue')\n//   },\n//   {\n//     path: '/register',\n//     name: 'Register',\n//     component: () => import( '../views/Element/RegisterView.vue')\n//   },\n//   {\n//     path: '/users',\n//     name: 'Users',\n//     component: () => import( '../views/Element/ShowTaskView.vue'),\n//     meta: { requiresAuth: true } // 需要身份验证的路由\n//   }\n// ];\n//\n// // // 添加全局导航守卫\n// // router.beforeEach((to, from, next) => {\n// //   const loggedIn = localStorage.getItem('userToken');\n// //\n// //   if (to.matched.some(record => record.meta.requiresAuth) && !loggedIn) {\n// //     next('/login'); // 如果没有令牌，重定向到登录页面\n// //   } else {\n// //     next(); // 否则继续\n// //   }\n// // });\n//\n// const router = new VueRouter({\n//   mode: 'history', // 设置使用历史模式\n//   routes\n// });\n//\n//\n// // 添加全局导航守卫\n// router.beforeEach((to, from, next) => {\n//   const loggedIn = localStorage.getItem('userToken');\n//\n//   if (to.matched.some(record => record.meta.requiresAuth) && !loggedIn) {\n//     next('/login'); // 如果未认证，重定向到登录页面\n//   } else {\n//     next(); // 否则，继续导航\n//   }\n// });\n//\n//\n// export default router\n\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\nVue.use(VueRouter);\nconst routes = [{\n  path: '/login',\n  name: 'Login',\n  component: () => import('../views/Element/LoginView.vue')\n}, {\n  path: '/users',\n  name: 'Users',\n  component: () => import('../views/Element/ShowTaskView.vue'),\n  meta: {\n    requiresAuth: true\n  } // 需要身份验证的路由\n}];\nconst router = new VueRouter({\n  mode: 'history',\n  // 设置使用历史模式\n  routes\n});\n\n// 添加全局导航守卫\nrouter.beforeEach((to, from, next) => {\n  const loggedIn = !!localStorage.getItem('access_token'); // 转换为布尔值\n\n  // 打印日志以调试\n  console.log(`从 ${from.path} 到 ${to.path}，登录状态：${loggedIn}`);\n  if (to.matched.some(record => record.meta.requiresAuth) && !loggedIn) {\n    // 如果目标路由需要认证且未登录\n    next('/login'); // 重定向到登录页面\n  } else if (to.path === '/login' && loggedIn) {\n    // 防止已登录用户访问登录页面\n    next('/users');\n  } else {\n    next(); // 继续导航\n  }\n});\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","use","routes","path","name","component","meta","requiresAuth","router","mode","beforeEach","to","from","next","loggedIn","localStorage","getItem","console","log","matched","some","record"],"sources":["H:/projects/task-manage-system/codes/front-end/src/router/index.js"],"sourcesContent":["// import Vue from 'vue'\r\n// import VueRouter from 'vue-router'\r\n//\r\n//\r\n// Vue.use(VueRouter)\r\n//\r\n// const routes = [\r\n//   {\r\n//     path: '/login',\r\n//     name: 'Login',\r\n//     component: () => import('../views/Element/LoginView.vue')\r\n//   },\r\n//   {\r\n//     path: '/register',\r\n//     name: 'Register',\r\n//     component: () => import( '../views/Element/RegisterView.vue')\r\n//   },\r\n//   {\r\n//     path: '/users',\r\n//     name: 'Users',\r\n//     component: () => import( '../views/Element/ShowTaskView.vue'),\r\n//     meta: { requiresAuth: true } // 需要身份验证的路由\r\n//   }\r\n// ];\r\n//\r\n// // // 添加全局导航守卫\r\n// // router.beforeEach((to, from, next) => {\r\n// //   const loggedIn = localStorage.getItem('userToken');\r\n// //\r\n// //   if (to.matched.some(record => record.meta.requiresAuth) && !loggedIn) {\r\n// //     next('/login'); // 如果没有令牌，重定向到登录页面\r\n// //   } else {\r\n// //     next(); // 否则继续\r\n// //   }\r\n// // });\r\n//\r\n// const router = new VueRouter({\r\n//   mode: 'history', // 设置使用历史模式\r\n//   routes\r\n// });\r\n//\r\n//\r\n// // 添加全局导航守卫\r\n// router.beforeEach((to, from, next) => {\r\n//   const loggedIn = localStorage.getItem('userToken');\r\n//\r\n//   if (to.matched.some(record => record.meta.requiresAuth) && !loggedIn) {\r\n//     next('/login'); // 如果未认证，重定向到登录页面\r\n//   } else {\r\n//     next(); // 否则，继续导航\r\n//   }\r\n// });\r\n//\r\n//\r\n// export default router\r\n\r\nimport Vue from 'vue';\r\nimport VueRouter from 'vue-router';\r\n\r\nVue.use(VueRouter);\r\n\r\nconst routes = [\r\n  {\r\n    path: '/login',\r\n    name: 'Login',\r\n    component: () => import('../views/Element/LoginView.vue')\r\n  },\r\n  {\r\n    path: '/users',\r\n    name: 'Users',\r\n    component: () => import('../views/Element/ShowTaskView.vue'),\r\n    meta: { requiresAuth: true } // 需要身份验证的路由\r\n  }\r\n];\r\n\r\nconst router = new VueRouter({\r\n  mode: 'history', // 设置使用历史模式\r\n  routes\r\n});\r\n\r\n// 添加全局导航守卫\r\nrouter.beforeEach((to, from, next) => {\r\n  const loggedIn = !!localStorage.getItem('access_token'); // 转换为布尔值\r\n\r\n  // 打印日志以调试\r\n  console.log(`从 ${from.path} 到 ${to.path}，登录状态：${loggedIn}`);\r\n\r\n  if (to.matched.some(record => record.meta.requiresAuth) && !loggedIn) {\r\n    // 如果目标路由需要认证且未登录\r\n    next('/login'); // 重定向到登录页面\r\n  } else if (to.path === '/login' && loggedIn) {\r\n    // 防止已登录用户访问登录页面\r\n    next('/users');\r\n  } else {\r\n    next(); // 继续导航\r\n  }\r\n});\r\n\r\nexport default router;\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAElCD,GAAG,CAACE,GAAG,CAACD,SAAS,CAAC;AAElB,MAAME,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,gCAAgC;AAC1D,CAAC,EACD;EACEF,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,mCAAmC,CAAC;EAC5DC,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAC;AAC/B,CAAC,CACF;AAED,MAAMC,MAAM,GAAG,IAAIR,SAAS,CAAC;EAC3BS,IAAI,EAAE,SAAS;EAAE;EACjBP;AACF,CAAC,CAAC;;AAEF;AACAM,MAAM,CAACE,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC,MAAMC,QAAQ,GAAG,CAAC,CAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;;EAEzD;EACAC,OAAO,CAACC,GAAG,CAAC,KAAKN,IAAI,CAACT,IAAI,MAAMQ,EAAE,CAACR,IAAI,SAASW,QAAQ,EAAE,CAAC;EAE3D,IAAIH,EAAE,CAACQ,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACf,IAAI,CAACC,YAAY,CAAC,IAAI,CAACO,QAAQ,EAAE;IACpE;IACAD,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;EAClB,CAAC,MAAM,IAAIF,EAAE,CAACR,IAAI,KAAK,QAAQ,IAAIW,QAAQ,EAAE;IAC3C;IACAD,IAAI,CAAC,QAAQ,CAAC;EAChB,CAAC,MAAM;IACLA,IAAI,CAAC,CAAC,CAAC,CAAC;EACV;AACF,CAAC,CAAC;AAEF,eAAeL,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// 在需要发送 HTTP 请求的组件中引入 Axios\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      isVisible: false,\n      isVisible1: true,\n      isVisible2: false,\n      isCollapse: true,\n      dialogFormVisible: false,\n      //dialog可视化\n      formInline: {\n        user: '',\n        region: ''\n      },\n      tableData: [{\n        id: 1,\n        name: '测试用户1',\n        gender: '男',\n        telephone: '1234567890'\n      }, {\n        id: 2,\n        name: '测试用户2',\n        gender: '女',\n        telephone: '0987654321'\n      }],\n      tableData2: [{\n        id: 1,\n        description: 'study',\n        detail: '今天学一小时，明白学两小时，依次递增，每天依次循环',\n        type: '学习',\n        price: 2000,\n        publisher: 1\n      }],\n      editedData: {},\n      // 用于保存用户编辑后的数据\n      editedData1: {} // 用于保存任务编辑后的数据\n    };\n  },\n  methods: {\n    // 导航栏\n    handleOpen(key, keyPath) {\n      console.log(key, keyPath);\n    },\n    handleClose(key, keyPath) {\n      console.log(key, keyPath);\n    },\n    //表格\n    handleEdit(index, row) {\n      this.editedData = {\n        ...row\n      }; // 使用对象解构复制数据，确保不改变原始数据\n      this.dialogFormVisible = true;\n      // console.log(index, row);\n    },\n    handleDelete(index, row) {\n      console.log(index, row);\n    },\n    onClickUsers() {\n      //表格可视化\n      this.isVisible = true;\n      //标题可视化\n      this.isVisible1 = false;\n      this.isVisible2 = false;\n    },\n    onClickTasks() {\n      //任务表格可视化\n      this.isVisible2 = true;\n      //表格可视化\n      this.isVisible = false;\n      //标题可视化\n      this.isVisible1 = false;\n    },\n    updateData() {\n      // 找到编辑的行在表格数据中的索引\n      const index = this.tableData.findIndex(item => item.id === this.editedData.id);\n      // 使用 Vue.set 方法更新数据，以确保响应式\n      this.$set(this.tableData, index, this.editedData);\n      // 关闭对话框\n      this.dialogFormVisible = false;\n    },\n    onSubmit() {\n      // 构造请求数据\n      const requestData = {\n        id: this.formInline.id,\n        username: this.formInline.username,\n        gender: this.formInline.gender,\n        telephone: this.formInline.telephone\n      };\n\n      // 发送 POST 请求到后端\n      axios.post(`/users?id=${this.id}`, requestData).then(response => {\n        // 请求成功，处理后端返回的数据\n        console.log('Response from server:', response.data);\n      }).catch(error => {\n        // 请求失败，处理错误情况\n        console.error('Error:', error);\n        // 在界面上显示错误消息\n        this.$message.error('请求失败，请稍后重试！');\n      });\n    },\n    fetchData() {\n      axios.get('/users') // 确保这个 URL 和你的后端 API 地址匹配\n      .then(response => {\n        this.tableData = response.data;\n      }).catch(error => {\n        console.error('Error fetching data:', error);\n        // 在界面上显示错误消息\n        this.$message.error('请求失败，请稍后重试！');\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","isVisible","isVisible1","isVisible2","isCollapse","dialogFormVisible","formInline","user","region","tableData","id","name","gender","telephone","tableData2","description","detail","type","price","publisher","editedData","editedData1","methods","handleOpen","key","keyPath","console","log","handleClose","handleEdit","index","row","handleDelete","onClickUsers","onClickTasks","updateData","findIndex","item","$set","onSubmit","requestData","username","post","then","response","catch","error","$message","fetchData","get"],"sources":["src/views/Element/ShowView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <el-form :inline=\"true\" :model=\"formInline\" class=\"demo-form-inline\">\r\n      <el-form-item label=\"用户id\">\r\n        <el-input v-model=\"formInline.id\" placeholder=\"id\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"用户名\">\r\n        <el-input v-model=\"formInline.username\" placeholder=\"用户名\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"性别\">\r\n        <el-select v-model=\"formInline.region\" placeholder=\"性别\">\r\n          <el-option label=\"男\" value=\"shanghai\"></el-option>\r\n          <el-option label=\"女\" value=\"beijing\"></el-option>\r\n          <el-option label=\"保密\" value=\"beijing\"></el-option>\r\n        </el-select>\r\n      </el-form-item>\r\n\r\n      <el-form-item>\r\n        <el-button type=\"primary\" @click=\"onSubmit\">查询</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n\r\n<!--  导航菜单  -->\r\n    <el-row class=\"tac\">\r\n      <el-col :span=\"4\" style=\"margin-top: 5px;position: absolute\">\r\n        <el-menu\r\n            default-active=\"2\"\r\n            class=\"el-menu-vertical-demo\"\r\n            @open=\"handleOpen\"\r\n            @close=\"handleClose\">\r\n          <el-submenu index=\"1\">\r\n            <template slot=\"title\">\r\n              <i class=\"el-icon-location\"></i>\r\n              <span>任务管理系统</span>\r\n            </template>\r\n            <el-menu-item-group>\r\n              <el-menu-item index=\"1-1\" @click=\"onClickUsers\">用户管理</el-menu-item>\r\n              <el-menu-item index=\"1-2\" @click=\"onClickTasks\">任务管理</el-menu-item>\r\n            </el-menu-item-group>\r\n          </el-submenu>\r\n        </el-menu>\r\n      </el-col>\r\n    </el-row>\r\n\r\n    <!-- 用户管理表格 -->\r\n    <el-table v-if=\"isVisible\"\r\n              :data=\"tableData\"\r\n              style=\"width: 80%; margin-left: 300px; margin-top: 5px;\">\r\n      <el-table-column\r\n          label=\"id\"\r\n          prop=\"id\"\r\n          width=\"180\">\r\n        <template slot-scope=\"scope\">\r\n          <span style=\"margin-left: 10px\">{{ scope.row.id }}</span>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column\r\n          label=\"昵称\"\r\n          prop=\"name\"\r\n          width=\"180\">\r\n      </el-table-column>\r\n      <el-table-column\r\n          label=\"性别\"\r\n          prop=\"gender\"\r\n          width=\"180\">\r\n        <template v-slot=\"scope\">\r\n          <span style=\"margin-left: 10px\">{{ scope.row.gender }}</span>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column\r\n          label=\"电话\"\r\n          prop=\"telephone\"\r\n          width=\"180\">\r\n        <template slot-scope=\"scope\">\r\n          <span style=\"margin-left: 10px\">{{ scope.row.telephone }}</span>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"操作\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button type=\"text\"\r\n              size=\"mini\"\r\n              @click=\"()=>{handleEdit(scope.$index, scope.row);dialogFormVisible = true}\">编辑</el-button>\r\n          <el-dialog title=\"修改信息\" :visible.sync=\"dialogFormVisible\">\r\n            <el-form :model=\"editedData\">\r\n              <el-form-item label=\"username\" :label-width=\"formLabelWidth\">\r\n                <el-input v-model=\"editedData.name\" autocomplete=\"off\" placeholder=\"请输入要修改的用户名\"></el-input>\r\n              </el-form-item>\r\n<!--              <el-form-item label=\"username\" :label-width=\"formLabelWidth\">-->\r\n<!--                <el-input v-model=\"editedData.username\" autocomplete=\"off\"></el-input>-->\r\n<!--              </el-form-item>-->\r\n              <el-form-item label=\"gender\" :label-width=\"formLabelWidth\">\r\n                <el-input v-model=\"editedData.gender\" autocomplete=\"off\" placeholder=\"请输入要修改的性别(男，女，保密)\">\r\n                </el-input>\r\n              </el-form-item>\r\n              <el-form-item label=\"telephone\" :label-width=\"formLabelWidth\">\r\n                <el-input v-model=\"editedData.telephone\" autocomplete=\"off\" placeholder=\"请输入要修改的电话号码\"></el-input>\r\n              </el-form-item>\r\n            </el-form>\r\n            <div slot=\"footer\" class=\"dialog-footer\">\r\n              <el-button @click=\"dialogFormVisible = false\">取 消</el-button>\r\n              <el-button type=\"primary\" @click=\"()=>{dialogFormVisible = false;updateData()}\">确 定</el-button>\r\n            </div>\r\n          </el-dialog>\r\n\r\n          <el-button type=\"text\"\r\n              size=\"mini\"\r\n              @click=\"handleDelete(scope.$index, scope.row)\">删除</el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n<!--标题-->\r\n    <h1 v-if=\"isVisible1\">欢迎来到任务管理系统</h1>\r\n\r\n    <!-- 任务管理表格 -->\r\n    <el-table v-if=\"isVisible2\"\r\n              :data=\"tableData2\"\r\n              style=\"width: 80%; margin-left: 220px; margin-top: 5px;\">\r\n      <el-table-column\r\n          prop=\"id\"\r\n          label=\"id\"\r\n          width=\"80\">\r\n        <template slot-scope=\"scope\">\r\n          <span style=\"margin-left: 10px\">{{ scope.row.id }}</span>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column\r\n          prop=\"shortDescription\"\r\n          label=\"简要描述\"\r\n          width=\"200\">\r\n        <template slot-scope=\"scope\">\r\n          <el-popover trigger=\"hover\" placement=\"top\">\r\n            <p>简要描述: {{ scope.row.description }}</p>\r\n            <div slot=\"reference\" class=\"name-wrapper\">\r\n              <el-tag size=\"medium\">{{ scope.row.description }}</el-tag>\r\n            </div>\r\n          </el-popover>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column\r\n          prop=\"detail\"\r\n          label=\"详细描述\"\r\n          width=\"220\">\r\n        <template slot-scope=\"scope\">\r\n          <span style=\"margin-left: 10px\">{{ scope.row.detail }}</span>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column\r\n          prop=\"type\"\r\n          label=\"类型\"\r\n          width=\"120\">\r\n        <template slot-scope=\"scope\">\r\n          <span style=\"margin-left: 10px\">{{ scope.row.type }}</span>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column\r\n          prop=\"price\"\r\n          label=\"任务酬劳\"\r\n          width=\"120\">\r\n        <template slot-scope=\"scope\">\r\n          <span style=\"margin-left: 10px\">{{ scope.row.price }}</span>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column\r\n          prop=\"publisher\"\r\n          label=\"任务发布人\"\r\n          width=\"120\">\r\n        <template slot-scope=\"scope\">\r\n          <span style=\"margin-left: 10px\">{{ scope.row.publisher }}</span>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"操作\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button type=\"text\"\r\n                     size=\"mini\"\r\n                     @click=\"()=>{handleEdit(scope.$index, scope.row);dialogFormVisible = true}\">编辑</el-button>\r\n          <el-dialog title=\"修改信息\" :visible.sync=\"dialogFormVisible\">\r\n            <el-form :model=\"editedData1\">\r\n              <el-form-item label=\"description\" :label-width=\"formLabelWidth\">\r\n                <el-input v-model=\"editedData1.description\" autocomplete=\"off\" placeholder=\"请输入要修改的用户名\"></el-input>\r\n              </el-form-item>\r\n              <el-form-item label=\"detail\" :label-width=\"formLabelWidth\">\r\n                <el-input v-model=\"editedData1.detail\" autocomplete=\"off\" placeholder=\"请输入要修改的性别(男，女，保密)\">\r\n                </el-input>\r\n              </el-form-item>\r\n              <el-form-item label=\"type\" :label-width=\"formLabelWidth\">\r\n                <el-input v-model=\"editedData1.type\" autocomplete=\"off\" placeholder=\"请输入要修改的电话号码\"></el-input>\r\n              </el-form-item>\r\n              <el-form-item label=\"price\" :label-width=\"formLabelWidth\">\r\n                <el-input v-model=\"editedData1.price\" autocomplete=\"off\" placeholder=\"请输入要修改的电话号码\"></el-input>\r\n              </el-form-item>\r\n              <el-form-item label=\"publisher\" :label-width=\"formLabelWidth\">\r\n                <el-input v-model=\"editedData1.ppublisher\" autocomplete=\"off\" placeholder=\"请输入要修改的电话号码\"></el-input>\r\n              </el-form-item>\r\n            </el-form>\r\n            <div slot=\"footer\" class=\"dialog-footer\">\r\n              <el-button @click=\"dialogFormVisible = false\">取 消</el-button>\r\n              <el-button type=\"primary\" @click=\"()=>{dialogFormVisible = false;updateData()}\">确 定</el-button>\r\n            </div>\r\n          </el-dialog>\r\n\r\n          <el-button type=\"text\"\r\n                     size=\"mini\"\r\n                     @click=\"handleDelete(scope.$index, scope.row)\">删除</el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n  </div>\r\n\r\n\r\n</template>\r\n\r\n<script>\r\n// 在需要发送 HTTP 请求的组件中引入 Axios\r\nimport axios from 'axios';\r\nexport default {\r\n  data() {\r\n    return {\r\n      isVisible: false,\r\n      isVisible1: true,\r\n      isVisible2: false,\r\n      isCollapse: true,\r\n      dialogFormVisible: false,//dialog可视化\r\n      formInline: {\r\n        user: '',\r\n        region: ''\r\n      },\r\n      tableData: [\r\n        { id: 1, name: '测试用户1', gender: '男', telephone: '1234567890' },\r\n        { id: 2, name: '测试用户2', gender: '女', telephone: '0987654321' }\r\n      ],\r\n      tableData2:[\r\n        {id:1,description:'study',detail:'今天学一小时，明白学两小时，依次递增，每天依次循环',type:'学习',price:2000,publisher:1}\r\n      ],\r\n      editedData: {}, // 用于保存用户编辑后的数据\r\n      editedData1: {}, // 用于保存任务编辑后的数据\r\n\r\n    }\r\n  },\r\n  methods: {\r\n    // 导航栏\r\n    handleOpen(key, keyPath) {\r\n      console.log(key, keyPath);\r\n    },\r\n    handleClose(key, keyPath) {\r\n      console.log(key, keyPath);\r\n    },\r\n    //表格\r\n    handleEdit(index, row) {\r\n      this.editedData = { ...row }; // 使用对象解构复制数据，确保不改变原始数据\r\n      this.dialogFormVisible = true;\r\n      // console.log(index, row);\r\n    },\r\n    handleDelete(index, row) {\r\n      console.log(index, row);\r\n    },\r\n    onClickUsers(){\r\n      //表格可视化\r\n      this.isVisible = true;\r\n      //标题可视化\r\n      this.isVisible1 = false;\r\n      this.isVisible2 = false;\r\n\r\n    },\r\n    onClickTasks(){\r\n      //任务表格可视化\r\n      this.isVisible2 = true;\r\n//表格可视化\r\n      this.isVisible = false;\r\n      //标题可视化\r\n      this.isVisible1 = false;\r\n\r\n    },\r\n    updateData() {\r\n      // 找到编辑的行在表格数据中的索引\r\n      const index = this.tableData.findIndex(item => item.id === this.editedData.id);\r\n      // 使用 Vue.set 方法更新数据，以确保响应式\r\n      this.$set(this.tableData, index, this.editedData);\r\n      // 关闭对话框\r\n      this.dialogFormVisible = false;\r\n    },\r\n    onSubmit() {\r\n      // 构造请求数据\r\n      const requestData = {\r\n        id: this.formInline.id,\r\n        username: this.formInline.username,\r\n        gender: this.formInline.gender,\r\n        telephone:this.formInline.telephone\r\n      };\r\n\r\n\r\n      // 发送 POST 请求到后端\r\n      axios.post(`/users?id=${this.id}`, requestData)\r\n          .then(response => {\r\n            // 请求成功，处理后端返回的数据\r\n            console.log('Response from server:', response.data);\r\n          })\r\n          .catch(error => {\r\n            // 请求失败，处理错误情况\r\n            console.error('Error:', error);\r\n            // 在界面上显示错误消息\r\n            this.$message.error('请求失败，请稍后重试！');\r\n          });\r\n    },\r\n    fetchData() {\r\n      axios.get('/users') // 确保这个 URL 和你的后端 API 地址匹配\r\n          .then(response => {\r\n            this.tableData = response.data;\r\n          })\r\n          .catch(error => {\r\n            console.error('Error fetching data:', error);\r\n            // 在界面上显示错误消息\r\n            this.$message.error('请求失败，请稍后重试！');\r\n          });\r\n    }\r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style>\r\n.el-dropdown-link {\r\n  cursor: pointer;\r\n  color: #409EFF;\r\n}\r\n.el-icon-arrow-down {\r\n  font-size: 12px;\r\n}\r\n</style>\r\n\r\n"],"mappings":"AAoNA;AACA,OAAAA,KAAA;AACA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,UAAA;MACAC,UAAA;MACAC,UAAA;MACAC,iBAAA;MAAA;MACAC,UAAA;QACAC,IAAA;QACAC,MAAA;MACA;MACAC,SAAA,GACA;QAAAC,EAAA;QAAAC,IAAA;QAAAC,MAAA;QAAAC,SAAA;MAAA,GACA;QAAAH,EAAA;QAAAC,IAAA;QAAAC,MAAA;QAAAC,SAAA;MAAA,EACA;MACAC,UAAA,GACA;QAAAJ,EAAA;QAAAK,WAAA;QAAAC,MAAA;QAAAC,IAAA;QAAAC,KAAA;QAAAC,SAAA;MAAA,EACA;MACAC,UAAA;MAAA;MACAC,WAAA;IAEA;EACA;EACAC,OAAA;IACA;IACAC,WAAAC,GAAA,EAAAC,OAAA;MACAC,OAAA,CAAAC,GAAA,CAAAH,GAAA,EAAAC,OAAA;IACA;IACAG,YAAAJ,GAAA,EAAAC,OAAA;MACAC,OAAA,CAAAC,GAAA,CAAAH,GAAA,EAAAC,OAAA;IACA;IACA;IACAI,WAAAC,KAAA,EAAAC,GAAA;MACA,KAAAX,UAAA;QAAA,GAAAW;MAAA;MACA,KAAA1B,iBAAA;MACA;IACA;IACA2B,aAAAF,KAAA,EAAAC,GAAA;MACAL,OAAA,CAAAC,GAAA,CAAAG,KAAA,EAAAC,GAAA;IACA;IACAE,aAAA;MACA;MACA,KAAAhC,SAAA;MACA;MACA,KAAAC,UAAA;MACA,KAAAC,UAAA;IAEA;IACA+B,aAAA;MACA;MACA,KAAA/B,UAAA;MACA;MACA,KAAAF,SAAA;MACA;MACA,KAAAC,UAAA;IAEA;IACAiC,WAAA;MACA;MACA,MAAAL,KAAA,QAAArB,SAAA,CAAA2B,SAAA,CAAAC,IAAA,IAAAA,IAAA,CAAA3B,EAAA,UAAAU,UAAA,CAAAV,EAAA;MACA;MACA,KAAA4B,IAAA,MAAA7B,SAAA,EAAAqB,KAAA,OAAAV,UAAA;MACA;MACA,KAAAf,iBAAA;IACA;IACAkC,SAAA;MACA;MACA,MAAAC,WAAA;QACA9B,EAAA,OAAAJ,UAAA,CAAAI,EAAA;QACA+B,QAAA,OAAAnC,UAAA,CAAAmC,QAAA;QACA7B,MAAA,OAAAN,UAAA,CAAAM,MAAA;QACAC,SAAA,OAAAP,UAAA,CAAAO;MACA;;MAGA;MACAd,KAAA,CAAA2C,IAAA,mBAAAhC,EAAA,IAAA8B,WAAA,EACAG,IAAA,CAAAC,QAAA;QACA;QACAlB,OAAA,CAAAC,GAAA,0BAAAiB,QAAA,CAAA5C,IAAA;MACA,GACA6C,KAAA,CAAAC,KAAA;QACA;QACApB,OAAA,CAAAoB,KAAA,WAAAA,KAAA;QACA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;IACA;IACAE,UAAA;MACAjD,KAAA,CAAAkD,GAAA;MAAA,CACAN,IAAA,CAAAC,QAAA;QACA,KAAAnC,SAAA,GAAAmC,QAAA,CAAA5C,IAAA;MACA,GACA6C,KAAA,CAAAC,KAAA;QACApB,OAAA,CAAAoB,KAAA,yBAAAA,KAAA;QACA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
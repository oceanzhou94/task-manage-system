{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\n// 在需要发送 HTTP 请求的组件中引入 Axios\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      username: '',\n      password: ''\n    };\n  },\n  methods: {\n    login() {\n      // 构造登录请求的数据\n      const requestData = new URLSearchParams();\n      requestData.append('username', this.username);\n      requestData.append('password', this.password);\n\n      // 发送登录请求\n      axios.post('http://192.168.184.1:8000/tms/login', requestData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      }).then(response => {\n        // 登录成功，根据后端返回的数据执行相应的操作\n        console.log('Login successful:', response.data);\n\n        // 假设后端返回的 token 在 response.data.token 中\n        const token = response.data.token;\n\n        // 保存 token 到 localStorage\n        localStorage.setItem('userToken', token);\n\n        // 导航到显示页面\n        //this.$router.push('/users');\n      }).catch(error => {\n        // 登录失败，处理错误情况\n        console.error('Login failed:', error);\n\n        // 处理登录失败后的逻辑，例如显示错误消息\n        // 此处可以根据需要决定是否导航到其他页面\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","username","password","methods","login","requestData","URLSearchParams","append","post","headers","then","response","console","log","token","localStorage","setItem","catch","error"],"sources":["src/views/Element/LoginView.vue"],"sourcesContent":["<template>\r\n  <!-- 登录界面 -->\r\n  <div class=\"login-container\">\r\n    <span class=\"style-span\" style=\"font-family:'华文彩云';font-weight:400;font-size:40px\">任务管理系统</span>\r\n    <form @submit.prevent=\"login\">\r\n      <div class=\"form-group\">\r\n        <label for=\"username\">用户名</label>\r\n        <input type=\"text\" placeholder=\"请输入你的用户名\" id=\"username\" v-model=\"username\" required />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"password\">密码</label>\r\n        <input type=\"password\" placeholder=\"请输入你的密码\" id=\"password\" v-model=\"password\" required />\r\n      </div>\r\n      <button type=\"submit\">登录</button>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 在需要发送 HTTP 请求的组件中引入 Axios\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      username: '',\r\n      password: ''\r\n    };\r\n  },\r\n  methods: {\r\n    login() {\r\n      // 构造登录请求的数据\r\n      const requestData = new URLSearchParams();\r\n      requestData.append('username', this.username);\r\n      requestData.append('password', this.password);\r\n\r\n      // 发送登录请求\r\n      axios.post('http://192.168.184.1:8000/tms/login', requestData, {\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded'\r\n        }\r\n      })\r\n          .then(response => {\r\n            // 登录成功，根据后端返回的数据执行相应的操作\r\n            console.log('Login successful:', response.data);\r\n\r\n            // 假设后端返回的 token 在 response.data.token 中\r\n            const token = response.data.token;\r\n\r\n            // 保存 token 到 localStorage\r\n            localStorage.setItem('userToken', token);\r\n\r\n            // 导航到显示页面\r\n            //this.$router.push('/users');\r\n          })\r\n          .catch(error => {\r\n            // 登录失败，处理错误情况\r\n            console.error('Login failed:', error);\r\n\r\n            // 处理登录失败后的逻辑，例如显示错误消息\r\n            // 此处可以根据需要决定是否导航到其他页面\r\n          });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.login-container {\r\n  max-width: 300px;\r\n  margin: 0 auto;\r\n  padding: 3rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\ninput {\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #0056b3;\r\n}\r\n</style>\r\n"],"mappings":";;;AAmBA;AACA,OAAAA,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,QAAA;MACAC,QAAA;IACA;EACA;EACAC,OAAA;IACAC,MAAA;MACA;MACA,MAAAC,WAAA,OAAAC,eAAA;MACAD,WAAA,CAAAE,MAAA,kBAAAN,QAAA;MACAI,WAAA,CAAAE,MAAA,kBAAAL,QAAA;;MAEA;MACAH,KAAA,CAAAS,IAAA,wCAAAH,WAAA;QACAI,OAAA;UACA;QACA;MACA,GACAC,IAAA,CAAAC,QAAA;QACA;QACAC,OAAA,CAAAC,GAAA,sBAAAF,QAAA,CAAAX,IAAA;;QAEA;QACA,MAAAc,KAAA,GAAAH,QAAA,CAAAX,IAAA,CAAAc,KAAA;;QAEA;QACAC,YAAA,CAAAC,OAAA,cAAAF,KAAA;;QAEA;QACA;MACA,GACAG,KAAA,CAAAC,KAAA;QACA;QACAN,OAAA,CAAAM,KAAA,kBAAAA,KAAA;;QAEA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}